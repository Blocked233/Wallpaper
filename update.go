package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/nutsdb/nutsdb"
)

// bing api json struct
type AutoGenerated struct {
	Images []struct {
		Startdate     string        `json:"startdate"`
		Fullstartdate string        `json:"fullstartdate"`
		Enddate       string        `json:"enddate"`
		URL           string        `json:"url"`
		Urlbase       string        `json:"urlbase"`
		Copyright     string        `json:"copyright"`
		Copyrightlink string        `json:"copyrightlink"`
		Title         string        `json:"title"`
		Quiz          string        `json:"quiz"`
		Wp            bool          `json:"wp"`
		Hsh           string        `json:"hsh"`
		Drk           int           `json:"drk"`
		Top           int           `json:"top"`
		Bot           int           `json:"bot"`
		Hs            []interface{} `json:"hs"`
	} `json:"images"`
	Tooltips struct {
		Loading  string `json:"loading"`
		Previous string `json:"previous"`
		Next     string `json:"next"`
		Walle    string `json:"walle"`
		Walls    string `json:"walls"`
	} `json:"tooltips"`
}

// template variables struct
type wallpaper struct {
	Time             [12]string
	HeadImgUrl       string
	HeadImgDesc      string
	HeadImgCopyright string
	TimeURL          map[string]string
}

var (
	db      *nutsdb.DB
	jsonmsg AutoGenerated
	bucket  = "bingWallpaper"
	// 20220216
	todayDate []byte
	// 202202
	todayYearMonth  []byte
	bingURL         = "https://www.bing.com"
	wallpaperParams = &wallpaper{TimeURL: make(map[string]string, 31)}
)

const apiAddr = "https://www.bing.com/HPImageArchive.aspx?format=js&n=1&pid=hp&mkt=en-US&uhd=1&uhdwidth=384&uhdheight=216"

func readJson() {

	var err error

	db, err = nutsdb.Open(
		nutsdb.DefaultOptions,
		nutsdb.WithDir("./nutsdb"),
	)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	for {

		resp, err := http.Get(apiAddr)
		if err != nil {
			log.Println(err)
			time.Sleep(time.Hour)
			continue
		}

		data, _ := io.ReadAll(resp.Body)
		json.Unmarshal(data, &jsonmsg)

		// error handling
		if len(jsonmsg.Images) == 0 {
			time.Sleep(time.Hour)
			continue
		}

		wallpaperParams.HeadImgDesc = jsonmsg.Images[0].Title
		wallpaperParams.HeadImgCopyright = jsonmsg.Images[0].Copyright
		todayDate = []byte(jsonmsg.Images[0].Enddate)
		todayYearMonth = []byte(todayDate[:6])
		todayURL := []byte(bingURL + jsonmsg.Images[0].Urlbase + "_UHD.jpg")

		if err := db.Update(
			func(tx *nutsdb.Tx) error {
				if err := tx.Put(bucket, todayDate, todayURL, 0); err != nil {
					return err
				}
				return nil
			}); err != nil {
			log.Println(err)
		}

		updateHTML()

		time.Sleep(24 * time.Hour)
	}
}

func updateMonth() {
	year, month, _ := time.Now().Date()

	for i := 0; i < 12; i++ {

		wallpaperParams.Time[i] = fmt.Sprintf("%d-%02d", year, month)

		month = month - 1

		if month == 0 {
			year = year - 1
			month = 12
		}

	}
}

func updateHTML() {

	updateMonth()
	// get all pictures of this month
	if err := db.View(
		func(tx *nutsdb.Tx) error {
			prefix := todayYearMonth

			if entries, _, err := tx.PrefixScan(bucket, prefix, 0, 31); err != nil {
				return err
			} else {
				for _, entry := range entries {
					wallpaperParams.TimeURL[string(entry.Key)] = string(entry.Value)
				}
			}
			return nil
		}); err != nil {
		log.Println(err)
	}

	// get the latest picture
	if err := db.View(
		func(tx *nutsdb.Tx) error {
			key := todayDate

			if e, err := tx.Get(bucket, key); err != nil {
				return err
			} else {
				wallpaperParams.HeadImgUrl = string(e.Value)
			}
			return nil
		}); err != nil {
		log.Println(err)
	}

	indexHTML, err := template.ParseFiles("./templates/bingTemplate.html")
	if err != nil {
		log.Println(err)
		return
	}

	// daily html
	out, err := os.Create("./static/html/" + wallpaperParams.Time[0] + ".html")
	if err != nil {
		log.Println(err)
		return
	}
	defer out.Close()

	err = indexHTML.Execute(out, wallpaperParams)
	if err != nil {
		log.Println(err)
		return
	}

	// index html
	index, err := os.Create("./static/html/index.html")
	if err != nil {
		log.Println(err)
		return
	}
	defer out.Close()

	err = indexHTML.Execute(index, wallpaperParams)
	if err != nil {
		log.Println(err)
		return
	}

	// register html
	registerHTML, err := template.ParseFiles("./templates/registerTemplate.html")
	if err != nil {
		log.Println(err)
		return
	}

	register, err := os.Create("./static/html/register.html")
	if err != nil {
		log.Println(err)
		return
	}
	defer out.Close()

	err = registerHTML.Execute(register, wallpaperParams)
	if err != nil {
		log.Println(err)
		return
	}

	// login html
	loginHTML, err := template.ParseFiles("./templates/loginTemplate.html")
	if err != nil {
		log.Println(err)
		return
	}

	login, err := os.Create("./static/html/login.html")
	if err != nil {
		log.Println(err)
		return
	}
	defer out.Close()

	err = loginHTML.Execute(login, wallpaperParams)
	if err != nil {
		log.Println(err)
		return
	}

}
